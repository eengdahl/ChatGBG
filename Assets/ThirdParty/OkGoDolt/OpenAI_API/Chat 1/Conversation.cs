using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static System.Net.WebRequestMethods;

namespace OpenAI_API.Chat
{
	/// Represents on ongoing chat with back-and-forth interactions between the user and the chatbot. 
	/// This is the simplest way to interact with the ChatGPT API, rather than manually using the ChatEnpoint methods. 
	public class Conversation
	{
		/// An internal reference to the API endpoint, needed for API requests
		private ChatEndpoint _endpoint;

		/// Allows setting the parameters to use when calling the ChatGPT API.  Can be useful for setting temperature, presence_penalty, and more.
		public ChatRequest RequestParameters { get; private set; }

		/// Specifies the model to use for ChatGPT requests.  This is just a shorthand to access RequestParameters.Model
		public OpenAI_API.Models.Model Model
		{
			get
			{
				return RequestParameters.Model;
			}
			set
			{
				RequestParameters.Model = value;
			}
		}

		/// After calling <see cref="GetResponseFromChatbotAsync"/>, this contains the full response object which can contain useful metadata like token usages,
		//<see cref="ChatChoice.FinishReason"/>, etc.  This is overwritten with every call to <see cref="GetResponseFromChatbotAsync"/> and only contains the most recent result.
		public ChatResult MostResentAPIResult { get; private set; }

		/// Creates a new conversation with ChatGPT chat
		/// endpoint A reference to the API endpoint, needed for API requests.  Generally should be "OpenAIAPI.Chat"
		/// model Optionally specify the model to use for ChatGPT requests.  If not specified, used <paramref name="defaultChatRequestArgs"/>.Model or falls back to <see cref="OpenAI_API.Models.Model.ChatGPTTurbo"/></param>
		/// defaultChatRequestArgs Allows setting the parameters to use when calling the ChatGPT API.
		public Conversation(ChatEndpoint endpoint, OpenAI_API.Models.Model model = null, ChatRequest defaultChatRequestArgs = null)
		{
			RequestParameters = new ChatRequest(defaultChatRequestArgs);
			if (model != null)
				RequestParameters.Model = model;
			if (RequestParameters.Model == null)
				RequestParameters.Model = Models.Model.ChatGPTTurbo;

			_Messages = new List<ChatMessage>();
			_endpoint = endpoint;
			RequestParameters.NumChoicesPerMessage = 1;
			RequestParameters.Stream = false;
		}

		/// A list of messages exchanged so far.  Do not modify this list directly.  
		//Instead, use <see cref="AppendMessage(ChatMessage)"/>, <see cref="AppendUserInput(string)"/>, <see cref="AppendSystemMessage(string)"/>,
		////or <see cref="AppendExampleChatbotOutput(string)"/>.
		public IReadOnlyList<ChatMessage> Messages { get => _Messages; }
		private List<ChatMessage> _Messages;

		/// Appends a <see cref="ChatMessage"/> to the chat hstory
		/// <param name="message">The <see cref="ChatMessage"/> to append to the chat history</param>
		public void AppendMessage(ChatMessage message)
		{
			_Messages.Add(message);
		}

		/// Creates and appends a <see cref="ChatMessage"/> to the chat hstory
		/// <param name="role">The <see cref="ChatMessageRole"/> for the message.  Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages. 
		/// <param name="content">The content of the message)</param>
		public void AppendMessage(ChatMessageRole role, string content) => this.AppendMessage(new ChatMessage(role, content));

		/// Creates and appends a <see cref="ChatMessage"/> to the chat hstory with the Role of <see cref="ChatMessageRole.User"/>. 
		//The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
		/// <param name="content">Text content generated by the end users of an application, or set by a developer as an instruction</param>
		public void AppendUserInput(string content) => this.AppendMessage(new ChatMessage(ChatMessageRole.User, content));

		/// Creates and appends a <see cref="ChatMessage"/> to the chat hstory with the Role of <see cref="ChatMessageRole.User"/>. 
		/// //The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
		/// <param name="userName">The name of the user in a multi-user chat</param>
		/// <param name="content">Text content generated by the end users of an application, or set by a developer as an instruction</param>
		public void AppendUserInputWithName(string userName, string content) => this.AppendMessage(new ChatMessage(ChatMessageRole.User, content) { Name = userName });


		/// Creates and appends a <see cref="ChatMessage"/> to the chat hstory with the Role of <see cref="ChatMessageRole.System"/>.
		/// The system message helps set the behavior of the assistant.
		/// <param name="content">text content that helps set the behavior of the assistant</param>
		public void AppendSystemMessage(string content) => this.AppendMessage(new ChatMessage(ChatMessageRole.System, content));
		/// Creates and appends a <see cref="ChatMessage"/> to the chat hstory with the Role of <see cref="ChatMessageRole.Assistant"/>. 
		/// //Assistant messages can be written by a developer to help give examples of desired behavior.
		/// <param name="content">Text content written by a developer to help give examples of desired behavior</param>
		public void AppendExampleChatbotOutput(string content) => this.AppendMessage(new ChatMessage(ChatMessageRole.Assistant, content));

		#region Non-streaming

		/// <summary>
		/// Calls the API to get a response, which is appended to the current chat's <see cref="Messages"/> as an <see cref="ChatMessageRole.Assistant"/> <see cref="ChatMessage"/>.
		/// </summary>
		/// <returns>The string of the response from the chatbot API</returns>
		public async Task<string> GetResponseFromChatbotAsync()
		{
			ChatRequest req = new ChatRequest(RequestParameters);
			req.Messages = _Messages.ToList();

			var res = await _endpoint.CreateChatCompletionAsync(req);
			MostResentAPIResult = res;

			if (res.Choices.Count > 0)
			{
				var newMsg = res.Choices[0].Message;
			//	AppendMessage(newMsg);
				return newMsg.Content;
			}
			return null;
		}

		/// <summary>
		/// OBSOLETE: GetResponseFromChatbot() has been renamed to <see cref="GetResponseFromChatbotAsync"/> to follow .NET naming guidelines.  This alias will be removed in a future version.
		/// </summary>
		/// <returns>The string of the response from the chatbot API</returns>
		[Obsolete("Conversation.GetResponseFromChatbot() has been renamed to GetResponseFromChatbotAsync to follow .NET naming guidelines.  Please update any references to GetResponseFromChatbotAsync().  This alias will be removed in a future version.", false)]
		public Task<string> GetResponseFromChatbot() => GetResponseFromChatbotAsync();


		#endregion

		#region Streaming

		/// <summary>
		/// Calls the API to get a response, which is appended to the current chat's <see cref="Messages"/> as an <see cref="ChatMessageRole.Assistant"/> <see cref="ChatMessage"/>, and streams the results to the <paramref name="resultHandler"/> as they come in. <br/>
		/// If you are on the latest C# supporting async enumerables, you may prefer the cleaner syntax of <see cref="StreamResponseEnumerableFromChatbotAsync"/> instead.
		///  </summary>
		/// <param name="resultHandler">An action to be called as each new result arrives.</param>
		public async Task StreamResponseFromChatbotAsync(Action<string> resultHandler)
		{
			await foreach (string res in StreamResponseEnumerableFromChatbotAsync())
			{
				resultHandler(res);
			}
		}

		/// <summary>
		/// Calls the API to get a response, which is appended to the current chat's <see cref="Messages"/> as an <see cref="ChatMessageRole.Assistant"/> <see cref="ChatMessage"/>, and streams the results to the <paramref name="resultHandler"/> as they come in. <br/>
		/// If you are on the latest C# supporting async enumerables, you may prefer the cleaner syntax of <see cref="StreamResponseEnumerableFromChatbotAsync"/> instead.
		///  </summary>
		/// <param name="resultHandler">An action to be called as each new result arrives, which includes the index of the result in the overall result set.</param>
		public async Task StreamResponseFromChatbotAsync(Action<int, string> resultHandler)
		{
			int index = 0;
			await foreach (string res in StreamResponseEnumerableFromChatbotAsync())
			{
				resultHandler(index++, res);
			}
		}

		/// <summary>
		/// Calls the API to get a response, which is appended to the current chat's <see cref="Messages"/> as an <see cref="ChatMessageRole.Assistant"/> <see cref="ChatMessage"/>, and streams the results as they come in. <br/>
		/// If you are not using C# 8 supporting async enumerables or if you are using the .NET Framework, you may need to use <see cref="StreamResponseFromChatbotAsync(Action{string})"/> instead.
		/// </summary>
		/// <returns>An async enumerable with each of the results as they come in.  See <see href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#asynchronous-streams"/> for more details on how to consume an async enumerable.</returns>
		public async IAsyncEnumerable<string> StreamResponseEnumerableFromChatbotAsync()
		{
			ChatRequest req = new ChatRequest(RequestParameters);
			req.Messages = _Messages.ToList();

			StringBuilder responseStringBuilder = new StringBuilder();
			ChatMessageRole responseRole = null;

			await foreach (var res in _endpoint.StreamChatEnumerableAsync(req))
			{
				if (res.Choices.FirstOrDefault()?.Delta is MyChatMessage delta)
				{
					if (delta.Role != null)
						responseRole = delta.Role;

					string deltaContent = delta.Content;

					if (!string.IsNullOrEmpty(deltaContent))
					{
						responseStringBuilder.Append(deltaContent);
						yield return deltaContent;
					}
				}
				MostResentAPIResult = res;
			}

			if (responseRole != null)
			{
				AppendMessage(responseRole, responseStringBuilder.ToString());
			}
		}

		#endregion
	}
}
